# Code generated by heidou , DO NOT EDIT.

{{- $modelName := .Name}}
{{- $modelNameCamel := .NameCamel}}
type {{.NameCamel}} implements Node {
  {{- range .Fields}}
  {{- if eq .JoinType "None"}}
			{{- if not (eq .NameCamel "DeletedAt") }}
  {{.NameLowerCamel}}: {{if or .IsPrimaryKey .IsForeignKey}}ID{{else}}{{.MetaType.GqlType}}{{end}}{{if or .IsPrimaryKey .IsRequired}}!{{end}}
			{{- end }}
  {{- end}}
  {{- $associationTable := .JoinTable}}
  {{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne")}}
  {{.NameLowerCamel}}: {{$associationTable.NameCamel}}{{if .IsRequired}}!{{end}}
  {{- end}}
  {{- if or (eq .JoinType "HasMany") (eq .JoinType "ManyToMany")}}
  {{- $associationTable := .JoinTable}}
  {{.NameLowerCamelPlural}}: [{{$associationTable.NameCamel}}]{{if .IsRequired}}!{{end}}
  {{- end}}
  {{- end}}
}

type {{.NameCamel}}Connection {
  pageInfo: PageInfo!
  edges: [{{.NameCamel}}Edge!]!
  totalCount: Int
}

type {{.NameCamel}}Create {
  errors: [{{.NameCamel}}Error!]
  {{.NameLowerCamel}}: {{.NameCamel}}
}

type {{.NameCamel}}Update {
  errors: [{{.NameCamel}}Error!]
  count: Int!
}

type {{.NameCamel}}Delete {
  errors: [{{.NameCamel}}Error!]
  count: Int!
}

type {{.NameCamel}}Edge {
  node: {{.NameCamel}}!
  cursor: Cursor
}

type {{.NameCamel}}Error {
  field: String
  message: String
  code: {{.NameCamel}}ErrorCode
}

enum {{.NameCamel}}ErrorCode {
  Invalid,
	NotFound,
	AlreadyExists,
  {{- range .ErrorCodes}}
  {{.}}
  {{- end}}
}

input {{.NameCamel}}FilterInput {
  {{- range .Fields}}
  {{- if .IsFilterable }}
  {{.NameLowerCamel}}: {{$modelNameCamel}}Op{{.NameCamel}}Input
  {{- end}}
  {{- end}}
  AND: [{{.NameCamel}}FilterInput]
  OR: [{{.NameCamel}}FilterInput]
}

{{- range .Fields}}
{{- if .IsFilterable }}
{{- $t := .MetaType.GqlType }}
{{- if or .IsPrimaryKey .IsForeignKey}}
{{- $t = "ID" }}
{{- end }}
input {{$modelNameCamel}}Op{{.NameCamel}}Input {
  {{- range .Operations}}
  {{- if eq . "In" }}
    {{- $t = (printf "[%s]" $t) }}
  {{- end }}
  {{.}}: {{$t}}
  {{- end}}
}
{{- end}}
{{- end}}

input {{.NameCamel}}Input {
{{- range .Fields}}
  {{- if not .IsPrimaryKey}}
    {{- if not (eq .NameCamel "DeletedAt") }}
      {{- if not (eq .NameCamel "UpdatedAt") }}
        {{- if not (eq .NameCamel "CreatedAt") }}
          {{- if not (eq .NameCamel "CreateBy") }}
            {{- if not (eq .NameCamel "UpdateBy") }}
    {{- if eq .JoinType "None"}}
  {{.NameLowerCamel}}: {{if or .IsPrimaryKey .IsForeignKey}}ID{{else}}{{.MetaType.GqlType}}{{if .IsRequired}}!{{end}}{{end}}
    {{- else}}
      {{- $associationTable := .JoinTable}}
      {{- if or (eq .JoinType "HasMany") (eq .JoinType "ManyToMany")}}
  {{.NameLowerCamelPlural}}: [{{$associationTable.NameCamel}}Input{{if .IsRequired}}!{{end}}]
      {{- else}}
  {{.NameLowerCamel}}: {{$associationTable.NameCamel}}Input{{if .IsRequired}}!{{end}}
      {{- end}}
              {{- end}}
            {{- end}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
}

enum {{.NameCamel}}OrderField {
  {{ .PrimaryKeyField.NameSnake | ToUpper }}
{{- if .Sortable}}
{{- range .Fields}}
  {{- if .IsSortable}}
  {{.NameSnake | ToUpper }}
  {{- end}}
{{- end}}
{{- end}}
}

input {{.NameCamel}}Order {
  direction: OrderDirection!
  field: {{.NameCamel}}OrderField!
}
