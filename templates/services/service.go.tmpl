// Code generated by hedone, DO NOT EDIT.
package services

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"gorm.io/gorm"

	"{{ .Extra.pkgpath }}/internal/generated/models"
	"{{ .Extra.pkgpath }}/pkg/validator"
)

{{- $modelName := .Name}}
{{- $modelNameCamel := .NameCamel}}
{{- $modelLowerName := .NameLowerCamel}}
type {{ .NameCamel }}Service interface {
	{{ .NameCamelPlural }}OffsetBased(ctx context.Context, filter *models.{{ .NameCamel }}FilterInput, orderBy *models.{{ .NameCamel }}Order, offset *int, limit *int) (*models.{{ .NameCamel }}Connection, error)
	{{ .NameCamelPlural }}CursorBased(ctx context.Context, filter *models.{{ .NameCamel }}FilterInput, orderBy *models.{{ .NameCamel }}Order, before *models.Cursor, after *models.Cursor, first *int, last *int) (*models.{{ .NameCamel }}Connection, error)

	{{ .NameCamel }}(ctx context.Context, id {{ .PrimaryKeyField.MetaType.GoType }}) (*models.{{ .NameCamel }}, error)

	{{ .NameCamel }}Create(ctx context.Context, input models.{{ .NameCamel }}Input) (*models.{{ .NameCamel }}Create, error)

	{{ .NameCamel }}Delete(ctx context.Context, ids []*{{ .PrimaryKeyField.MetaType.GoType }}) (*models.{{ .NameCamel }}Delete, error)

	{{ .NameCamel }}Update(ctx context.Context, ids []*{{ .PrimaryKeyField.MetaType.GoType }}, input models.{{ .NameCamel }}Input) (*models.{{ .NameCamel }}Update, error)
}

// {{ .NameCamel }}PaginateOption enables pagination customization.
type {{ .NameCamel }}PaginateOption func(*{{ .NameLowerCamel }}Pager) error

// With{{ .NameCamel }}Order configures pagination ordering.
func With{{ .NameCamel }}Order(order *models.{{ .NameCamel }}Order) {{ .NameCamel }}PaginateOption {
	if order == nil {
		order = models.Default{{ .NameCamel }}Order
	}
	o := *order
	return func(pager *{{ .NameLowerCamel }}Pager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = models.Default{{ .NameCamel }}Order.Field
		}
		pager.order = &o
		return nil
	}
}

func With{{ .NameCamel }}Filter(filter *models.{{ .NameCamel }}FilterInput) {{ .NameCamel }}PaginateOption {
	return func(pager *{{ .NameLowerCamel }}Pager) error {
		pager.filter = filter
		return nil
	}
}

type {{ .NameLowerCamel }}Pager struct {
	order  *models.{{ .NameCamel }}Order
	filter *models.{{ .NameCamel }}FilterInput
}

func new{{ .NameCamel }}Pager(opts []{{ .NameCamel }}PaginateOption) (*{{ .NameLowerCamel }}Pager, error) {
	pager := &{{ .NameLowerCamel }}Pager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = models.Default{{ .NameCamel }}Order
	}
	return pager, nil
}

{{- $pagerReceiver := receiver (printf "%sPager" .NameLowerCamel) }}
func ({{ $pagerReceiver }} *{{ .NameLowerCamel }}Pager) applyFilter(db *gorm.DB) *gorm.DB {
	if {{ $pagerReceiver }}.filter != nil {
		db = apply{{ .NameCamel }}Filter(db, {{ $pagerReceiver }}.filter, models.FilterLogicOpAnd)
	}
	return db
}

func ({{ $pagerReceiver }} *{{ .NameLowerCamel }}Pager) toCursor(p *models.{{ .NameCamel }}) models.Cursor {
	return {{ $pagerReceiver }}.order.Field.ToCursor(p)
}

func ({{ $pagerReceiver }} *{{ .NameLowerCamel }}Pager) applyOrder(db *gorm.DB, reverse bool) *gorm.DB {
	direction := {{ $pagerReceiver }}.order.Direction
	if reverse {
		direction = direction.Reverse()
	}
	field := {{ $pagerReceiver }}.order.Field
	db = db.Order(direction.OrderFunc(field.Field))

	return db
}

type {{ .NameCamel }}GormService struct {
	DB *gorm.DB
	V  *validator.Validator

	preload string

	{{- range .Fields}}
	{{- if not (eq .JoinType "None") }}
	{{- $associationModel := .JoinTable}}
	{{- $associationFieldName := "" }}
	{{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne") }}
		{{- $associationFieldName = .NameCamel }}
	{{- end }}
	{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
		{{- $associationFieldName = .NameCamelPlural }}
	{{- end }}
		with{{ $associationFieldName }} *{{ $associationModel.NameCamel }}GormService
	{{- end}}
	{{- end}}
}

func New{{ .NameCamel }}GormService(db *gorm.DB, v *validator.Validator) *{{ $modelNameCamel }}GormService {
	return &{{ .NameCamel }}GormService{
		DB: db,
		V:  v,
	}
}

{{- $svcReceiver := receiver (printf "%sGormService" $modelNameCamel) }}
{{- range .Fields}}
{{- if not (eq .JoinType "None") }}
{{- $associationModel := .JoinTable}}
{{- $associationFieldName := "" }}
{{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne") }}
	{{- $associationFieldName = .NameCamel }}
{{- end }}
{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
	{{- $associationFieldName = .NameCamelPlural }}
{{- end }}
func ({{ $svcReceiver }} *{{ $modelNameCamel }}GormService) With{{$associationFieldName }}(opts ...func(*{{ $associationModel.NameCamel }}GormService)) *{{ $modelNameCamel }}GormService {
	svc := &{{ $associationModel.NameCamel }}GormService{DB: {{ $svcReceiver }}.DB}
	for _, opt := range opts {
		opt(svc)
	}
	{{ $svcReceiver }}.with{{ $associationFieldName}} = svc
	return {{ $svcReceiver }}
}
{{- end}}
{{- end}}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *{{ .NameCamel }}GormService {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		{{- range .Fields}}
		{{- $associationModel := .JoinTable}}
		{{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne") }}
			case "{{ .NameLowerCamel }}":
				{{ $svcReceiver }}.With{{ .NameCamel }}(func(svc *{{ $associationModel.NameCamel }}GormService) {
					svc.collectField(ctx, field)
				})
		{{- end}}
		{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
			case "{{ .NameLowerCamelPlural }}":
				{{ $svcReceiver }}.With{{ .NameCamelPlural }}(func(svc *{{ $associationModel.NameCamel }}GormService) {
					svc.collectField(ctx, field)
				})
		{{- end}}
		{{- end}}
		}
	}
	return {{ $svcReceiver }}
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) applyPreload(ctx context.Context, db *gorm.DB) *gorm.DB {

	{{- range .Fields}}
	{{- $associationModel := .JoinTable}}
	{{- if or (eq .JoinType "BelongTo") (eq .JoinType "HasOne") }}
	if svc := {{ $svcReceiver }}.with{{ .NameCamel }}; svc != nil {
		preload := "{{ .NameCamel }}"
		if {{ $svcReceiver }}.preload != "" {
			preload = {{ $svcReceiver }}.preload + "." + preload
		}

		db = db.Preload(preload)

		svc.preload = preload
		db = svc.applyPreload(ctx, db)
	}
	{{- end}}
	{{- if or (eq .JoinType "ManyToMany") (eq .JoinType "HasMany") }}
	if svc := {{ $svcReceiver }}.with{{ .NameCamelPlural }}; svc != nil {
		preload := "{{ .NameCamelPlural }}"
		if {{ $svcReceiver }}.preload != "" {
			preload = {{ $svcReceiver }}.preload + "." + preload
		}

		db = db.Preload(preload)

		svc.preload = preload
		db = svc.applyPreload(ctx, db)
	}
	{{- end}}
	{{- end}}

	return db
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) paginate(ctx context.Context, after *models.Cursor, first *int, before *models.Cursor, last *int, opts ...{{ .NameCamel }}PaginateOption) (*models.{{ .NameCamel }}Connection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}

	db := {{ $svcReceiver }}.DB.Session(&gorm.Session{})

	pager, err := new{{ .NameCamel }}Pager(opts)
	if err != nil {
		return nil, err
	}

	db = pager.applyFilter(db)
	if db.Error != nil {
		return nil, db.Error
	}

	var count int64
	conn := &models.{{ .NameCamel }}Connection{Edges: []*models.{{ .NameCamel }}Edge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			if err := db.Model(&models.{{ .NameCamel }}{}).Count(&count).Error; err != nil {
				return nil, err
			}
			conn.TotalCount = int(count)
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		// count, err := {{ $svcReceiver }}.Clone().Count(ctx)
		if err := db.Model(&models.{{ .NameCamel }}{}).Count(&count).Error; err != nil {
			return nil, err
		}
		conn.TotalCount = int(count)
	}

	db = applyCursors(ctx, db, pager.order.Direction,
		after, before,
		pager.order.Field.Field,
	)
	//db = applyCursors(ctx, db, pager.order.Direction,
	//	after, before,
	//	pager.order.Field.Field, models.Default{{ .NameCamel }}Order.Field.Field,
	//)
	db = pager.applyOrder(db, last != nil)
	db, limit := applyLimit(ctx, db, first, last)
	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		{{ $svcReceiver }} = {{ $svcReceiver }}.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes := make([]*models.{{ .NameCamel }}, 0)
	db = {{ $svcReceiver }}.applyPreload(ctx, db)
	err = db.Model(&models.{{ .NameCamel }}{}).Find(&nodes).Error
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *models.{{ .NameCamel }}
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *models.{{ .NameCamel }} {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *models.{{ .NameCamel }} {
			return nodes[i]
		}
	}

	conn.Edges = make([]*models.{{ .NameCamel }}Edge, 0, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &models.{{ .NameCamel }}Edge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) paginateOffsetBased(ctx context.Context, offset *int, limit *int, opts ...{{ .NameCamel }}PaginateOption) (*models.{{ .NameCamel }}Connection, error) {
	if err := validateOffsetLimit(offset, limit); err != nil {
		return nil, err
	}

	db := {{ $svcReceiver }}.DB.Session(&gorm.Session{})

	pager, err := new{{ .NameCamel }}Pager(opts)
	if err != nil {
		return nil, err
	}

	db = pager.applyFilter(db)
	if db.Error != nil {
		return nil, db.Error
	}

	var count int64
	conn := &models.{{ .NameCamel }}Connection{Edges: []*models.{{ .NameCamel }}Edge{}}
	
	if hasCollectedField(ctx, totalCountField) {
		// count, err := {{ $svcReceiver }}.Clone().Count(ctx)
		if err := db.Model(&models.{{ .NameCamel }}{}).Count(&count).Error; err != nil {
			return nil, err
		}
		conn.TotalCount = int(count)
	}

	db = pager.applyOrder(db, false)
	if offset != nil {
		db = db.Offset(*offset)
	}
	if limit != nil {
		db = db.Limit(*limit + 1)
	}
	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		{{ $svcReceiver }} = {{ $svcReceiver }}.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes := make([]*models.{{ .NameCamel }}, 0)
	db = {{ $svcReceiver }}.applyPreload(ctx, db)
	err = db.Model(&models.{{ .NameCamel }}{}).Find(&nodes).Error
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if limit != nil && len(nodes) == *limit+1 {
		conn.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	}
	
	conn.Edges = make([]*models.{{ .NameCamel }}Edge, 0, len(nodes))
	for _, node := range nodes {
		conn.Edges = append(conn.Edges, &models.{{ .NameCamel }}Edge{
			Node:   node,
		})
	}

	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// 处理  过滤条件
// op 取值 OR, AND, NOT
func apply{{ .NameCamel }}Filter(db *gorm.DB, filterInput *models.{{ .NameCamel }}FilterInput, op models.FilterLogicOp) *gorm.DB {
	if filterInput == nil {
		return db
	}

	{{- range .Fields}}
	{{- $field := .}}
  	{{- if .IsFilterable }}
	if filterInput.{{ $field.NameCamel }} != nil {
		where := map[string]interface{}{}
		{{- range .Operations }}
			if filterInput.{{ $field.NameCamel }}.{{ . }} != nil {
				key := fmt.Sprintf("%s %s", "{{ $field.NameSnake }}", models.FilterLogicOpAll["{{ . }}"])
				where[key] = filterInput.{{ $field.NameCamel }}.{{ . }}
			}
		{{- end }}
		for k, v := range where {
			if op == models.FilterLogicOpOr {
				db = db.Or(k, v)
			} else {
				db = db.Where(k, v)
			}
		}
	}
	{{- end}}
	{{- end}}

	if filterInput.OR != nil {
		tx := db.Session(&gorm.Session{})
		for _, input := range filterInput.OR {
			tx = apply{{ .NameCamel }}Filter(tx, input, models.FilterLogicOpOr)
		}
		db = db.Where(tx)
	}

	if filterInput.AND != nil {
		tx := db.Session(&gorm.Session{})
		for _, input := range filterInput.AND {
			tx = apply{{ .NameCamel }}Filter(tx, input, models.FilterLogicOpAnd)
		}
		db = db.Where(tx)
	}

	return db
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamelPlural }}OffsetBased(ctx context.Context, filter *models.{{ .NameCamel }}FilterInput, orderBy *models.{{ .NameCamel }}Order, offset *int, limit *int) (*models.{{ .NameCamel }}Connection, error) {
	return {{ $svcReceiver }}.paginateOffsetBased(ctx, offset, limit, With{{ .NameCamel }}Filter(filter), With{{ .NameCamel }}Order(orderBy))
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamelPlural }}CursorBased(ctx context.Context, filter *models.{{ .NameCamel }}FilterInput, orderBy *models.{{ .NameCamel }}Order, before *models.Cursor, after *models.Cursor, first *int, last *int) (*models.{{ .NameCamel }}Connection, error) {
	return {{ $svcReceiver }}.paginate(ctx, after, first, before, last, With{{ .NameCamel }}Filter(filter), With{{ .NameCamel }}Order(orderBy))
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamel }}(ctx context.Context, id {{ .PrimaryKeyField.MetaType.GoType }}) (*models.{{ .NameCamel }}, error) {
	result := &models.{{ .NameCamel }}{}
	result.Id = id

	db := {{ $svcReceiver }}.DB.Session(&gorm.Session{})

	fieldCtx := graphql.GetFieldContext(ctx)
	{{ $svcReceiver }} = {{ $svcReceiver }}.collectField(graphql.GetOperationContext(ctx), fieldCtx.Field, "")

	db = {{ $svcReceiver }}.applyPreload(ctx, db)

	err := db.Model(result).First(result).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}

	return result, nil
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamel }}Create(ctx context.Context, input models.{{ .NameCamel }}Input) (*models.{{ .NameCamel }}Create, error) {
	fmt.Printf("%#v\n", input)
	result := &models.{{ .NameCamel }}Create{}

	if err := {{ $svcReceiver }}.V.Validate.Struct(input); err != nil {
		field := ""
		code := models.{{ .NameCamel }}ErrorCodeInvalid
		e := &models.{{ .NameCamel }}Error{
			Code:    code,
			Message: err.Error(),
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, err

	}
	{{ .NameLowerCamel }} := input.ToORM()

	var err error
	tx := {{ $svcReceiver }}.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	if err = tx.Omit("UpdatedAt", "UpdateBy", "DeletedAt").Create({{ .NameLowerCamel }}).Error; err != nil {
		field := ""
		code := models.{{ .NameCamel }}ErrorCodeInvalid
		e := &models.{{ .NameCamel }}Error{
			Code:    code,
			Message: err.Error(),
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, err
	}
	result.{{ .NameCamel }} = {{ .NameLowerCamel }}

	fmt.Printf("%#v\n", {{ .NameLowerCamel }})
	tx.Commit()
	return result, nil
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamel }}Delete(ctx context.Context, ids []*{{ .PrimaryKeyField.MetaType.GoType }}) (*models.{{ .NameCamel }}Delete, error) {
	result := &models.{{ .NameCamel }}Delete{}
	var err error

	for _, id := range ids {
		if id == nil || len(strings.TrimSpace(*id)) == 0 {
			err = fmt.Errorf("id must be set")
			field := "id"
			code := models.{{ .NameCamel }}ErrorCodeInvalid
			e := &models.{{ .NameCamel }}Error{
				Code:    code,
				Message: err.Error(),
				Field:   field,
			}
			result.Errors = append(result.Errors, e)
			return result, err
		}
	}

	tx := {{ $svcReceiver }}.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	tx = tx.Where("id IN ? ", ids).Delete(&models.{{ .NameCamel }}{})
	if err = tx.Error; err != nil {
		msg := err.Error()
		field := ""
		code := models.{{ .NameCamel }}ErrorCodeInvalid
		e := &models.{{ .NameCamel }}Error{
			Code:    code,
			Message: msg,
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, err
	}
	result.Count = int(tx.RowsAffected)
	tx.Commit()
	return result, nil
}

func ({{ $svcReceiver }} *{{ .NameCamel }}GormService) {{ .NameCamel }}Update(ctx context.Context, ids []*{{ .PrimaryKeyField.MetaType.GoType }}, input models.{{ .NameCamel }}Input) (*models.{{ .NameCamel }}Update, error) {
	fmt.Printf("%#v\n", input)
	result := &models.{{ .NameCamel }}Update{}
	var err error

	for _, id := range ids {
		if id == nil || len(strings.TrimSpace(*id)) == 0 {
			err = fmt.Errorf("id must be set")
			field := "id"
			code := models.{{ .NameCamel }}ErrorCodeInvalid
			e := &models.{{ .NameCamel }}Error{
				Code:    code,
				Message: err.Error(),
				Field:   field,
			}
			result.Errors = append(result.Errors, e)
			return result, err
		}
	}
	err = {{ $svcReceiver }}.V.Validate.Struct(input)
	if err != nil {
		field := ""
		code := models.{{ .NameCamel }}ErrorCodeInvalid
		e := &models.{{ .NameCamel }}Error{
			Code:    code,
			Message: err.Error(),
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, err
	}
	{{ .NameLowerCamel }} := input.ToORM()

	tx := {{ $svcReceiver }}.DB.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	tx = tx.Select("*").Omit("CreatedAt", "CreateBy", "DeletedAt").Where("id IN ? ", ids).Updates({{ .NameLowerCamel }})
	if err = tx.Error; err != nil {
		field := ""
		code := models.{{ .NameCamel }}ErrorCodeInvalid
		e := &models.{{ .NameCamel }}Error{
			Code:    code,
			Message: err.Error(),
			Field:   field,
		}
		result.Errors = append(result.Errors, e)
		return result, err
	}
	result.Count = int(tx.RowsAffected)
	tx.Commit()
	return result, nil
}
