// Code generated by hedone, DO NOT EDIT.
package services

import (
	"context"
	"fmt"

	"{{ .Extra.pkgpath }}/internal/middleware"
	"{{ .Extra.pkgpath }}/internal/models"
)

type CurrentService interface {
	ToSession(ctx context.Context) (*models.CurrentUser, error)
}

type DefaultCurrentSerivce struct {
}

func NewDefaultCurrentService() *DefaultCurrentSerivce {
	return &DefaultCurrentSerivce{
	}
}

func (dcs *DefaultCurrentSerivce) ToSession(ctx context.Context) (*models.CurrentUser, error) {
	ginCtx, err := GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	userCtx, ok := ginCtx.Get(middleware.UserCtxKey)
	if !ok {
		return nil, fmt.Errorf("User is not exist in context")
	}

	user, ok := userCtx.(*models.CurrentUser)
	if !ok {
		return nil, fmt.Errorf("Unknown user in context")
	}

	currentUser := &models.CurrentUser{
		Name: user.Name,
		Permissions: []models.Permission{
			{
				Code: "group:list",
				Name: "group:list",
			},
			{
				Code: "group:create",
				Name: "group:create",
			},
			{
				Code: "group:get",
				Name: "group:get",
			},
			{
				Code: "group:update",
				Name: "group:update",
			},
			{
				Code: "group:delete",
				Name: "group:delete",
			},
		},
	}

	return currentUser, err
}
